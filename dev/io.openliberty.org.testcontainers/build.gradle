/*******************************************************************************
 * Copyright (c) 2022, 2025 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
configurations {
  runtime
}

dependencies {
  runtime project(':io.openliberty.com.fasterxml.jackson')
  runtime project(':com.ibm.ws.componenttest')
  runtime project(':fattest.simplicity')
}

task assembleTestContainerData(type: JavaExec) {
    // Do not execute this task during our builds
    onlyIf {
        !isAutomatedBuild
    }
    
    // Use LibertyMirrorSubstitutor to generate image names for cache/images
    environment "TESTCONTAINERS_IMAGE_SUBSTITUTOR", "componenttest.containers.substitution.LibertyMirrorSubstitutor"
    
    // Run main method of CacheFiles class
    classpath = configurations.runtime.plus(sourceSets.main.runtimeClasspath)
    main = "io.openliberty.org.testcontainers.generate.CacheFiles"
    args project.getProjectDir()
    
    // Debugging properties for testcontainers
    systemProperties = [
      'org.slf4j.simpleLogger.logFile': new File(project.getProjectDir(), 'build/cache.log'),
      'org.slf4j.simpleLogger.showDateTime': 'true',
      'org.slf4j.simpleLogger.dateTimeFormat': '[MM/dd/yyyy HH:mm:ss:SSS z]',
      'org.slf4j.simpleLogger.log.org.testcontainers': 'debug',
      'org.slf4j.simpleLogger.log.tc': 'debug',
      'org.slf4j.simpleLogger.log.com.github.dockerjava': 'warn',
      'org.slf4j.simpleLogger.log.com.github.dockerjava.zerodep.shaded.org.apache.hc.client5.http.wire': 'off'
    ]
}

task generateCustomImages(type: JavaExec) {
    // If artifactory is available then use it for BASE_NAME substitution
    if ( gradle.userProps.containsKey("artifactory.docker.server") ) {
        environment "TESTCONTAINERS_IMAGE_SUBSTITUTOR", "componenttest.containers.substitution.LibertyImageNameSubstitutor"
        environment "ARTIFACTORY_DOCKER_SERVER", gradle.userProps.getProperty("artifactory.docker.server")
    }
    
    // If internal registry is available then use it for caching image
    if ( gradle.userProps.containsKey("docker_registry.server") ) {
        environment "DOCKER_REGISTRY_SERVER", gradle.userProps.getProperty("docker_registry.server")
    }
    
    // Run main method of CustomImages class
    classpath = configurations.runtime.plus(sourceSets.main.runtimeClasspath)
    main = "io.openliberty.org.testcontainers.generate.CustomImages"
    args project.getProjectDir()
    
    // Debugging properties for testcontainers
    systemProperties = [
      'org.slf4j.simpleLogger.logFile': new File(project.getProjectDir(), 'build/build.log'),
      'org.slf4j.simpleLogger.showDateTime': 'true',
      'org.slf4j.simpleLogger.dateTimeFormat': '[MM/dd/yyyy HH:mm:ss:SSS z]',
      'org.slf4j.simpleLogger.log.org.testcontainers': 'debug',
      'org.slf4j.simpleLogger.log.tc': 'debug',
      'org.slf4j.simpleLogger.log.com.github.dockerjava': 'warn',
      'org.slf4j.simpleLogger.log.com.github.dockerjava.zerodep.shaded.org.apache.hc.client5.http.wire': 'off'
    ]
}
