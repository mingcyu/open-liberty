// Helper function to process entities in a directory
def processEntities(baseDir, keysFile, action) {
    if (baseDir.exists() && baseDir.isDirectory()) {
        baseDir.listFiles()
            .findAll { it.isDirectory() } // Only process directories
            .each { entityDir ->
                ["resources/security", "serverLTPAKeys", "engineLTPAKeys"].each { subPath ->
                    def targetDir = new File(entityDir, subPath)
                    def ltpaFile = new File(targetDir, "ltpa.keys")

                    if (action == "copy" && keysFile != null && ltpaFile.exists()) {
                        copy {
                            from keysFile
                            into targetDir
                        }
                    } else if (action == "delete") {
                        def delFile = new File(targetDir, keysFile)
                        if (delFile != null) {
                            delFile.delete()
                        }
                    }
                }
            }

        // Directly check for subpaths under the base directory itself
        ["resources/security", "serverLTPAKeys", "engineLTPAKeys"].each { subPath ->
            def targetDir = new File(baseDir, subPath)
            def ltpaFile = new File(targetDir, "ltpa.keys")

            if (action == "copy" && keysFile != null && ltpaFile.exists()) {
                copy {
                    from keysFile
                    into targetDir
                }
            } else if (action == "delete") {
                def delFile = new File(targetDir, keysFile)
                if (delFile != null) {
                    delFile.delete()
                }
            }
        }
    }
}

// Macro to copy LTPA keys
ext.copyLTPAKeys = { publishBaseDir, destinationDir, keysFileName ->
    def sourceDir = new File(project(":com.ibm.ws.security.fat.common").projectDir, "publish/shared/securityKeys")
    def keysFile = new File(sourceDir, keysFileName)

    if (!keysFile.exists()) {
        return
    }

    if (publishBaseDir?.trim()) {
        ["servers", "clients", "files"].each { subDir ->
            def baseDir = new File(publishBaseDir, subDir)
            processEntities(baseDir, keysFile, "copy")
        }
    }

    if (destinationDir?.trim()) {
        copy {
            from keysFile
            into destinationDir
        }
    }
}

// Define a default macro with hardcoded paths and no parameters for the  default LTPA FIPS key
ext.defaultCopyLTPAFIPSKeys = { publishBaseDir ->
    def defaultDestinationDir = ""
    def defaultKeysFileName = "ltpaFIPS.keys"

    // Call the main macro with default values
    copyLTPAKeys(publishBaseDir, defaultDestinationDir, defaultKeysFileName)
}

// Define a default macro with hardcoded paths and no parameters for the default LTPA key
ext.defaultCopyLTPAKeys = { publishBaseDir ->
    def defaultDestinationDir = ""
    def defaultKeysFileName = "ltpa.keys"

    // Call the main macro with default values
    copyLTPAKeys(publishBaseDir, defaultDestinationDir, defaultKeysFileName)
}


// Macro to delete added keys after the FAT test
ext.deleteLTPAKeys = { publishBaseDir, destinationDir, keysFileName ->
    // Delete from servers, clients, and files directories
    if (publishBaseDir?.trim()) {
        ["servers", "clients", "files"].each { subDir ->
            def baseDir = new File(publishBaseDir, subDir)
            processEntities(baseDir, keysFileName, "delete")
        }
    }

    // Delete from the single destination directory
    if (destinationDir?.trim()) {
        def keysFile = new File(destinationDir, keysFileName)
        if (keysFile.exists()) {
            keysFile.delete()
        }
    }
}


// Define a default macro with hardcoded paths and no parameters for the default LTPA key
ext.defaultDeleteLTPAKeys = { publishBaseDir ->
    def defaultDestinationDir = ""
    def defaultKeysFileName = "ltpa.keys"

    // Call the main macro with default values
    deleteLTPAKeys(publishBaseDir, defaultDestinationDir, defaultKeysFileName)
}

// Define a default macro with hardcoded paths and no parameters for the default LTPA FIPS key
ext.defaultDeleteLTPAFIPSKeys = { publishBaseDir ->
    def defaultDestinationDir = ""
    def defaultKeysFileName = "ltpaFIPS.keys"

    // Call the main macro with default values
    deleteLTPAKeys(publishBaseDir, defaultDestinationDir, defaultKeysFileName)
}